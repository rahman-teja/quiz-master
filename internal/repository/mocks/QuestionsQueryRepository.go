// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import entity "github.com/rahman-teja/quiz-master/internal/entity"
import mock "github.com/stretchr/testify/mock"

// QuestionsQueryRepository is an autogenerated mock type for the QuestionsQueryRepository type
type QuestionsQueryRepository struct {
	mock.Mock
}

// Get provides a mock function with given fields: ctx
func (_m *QuestionsQueryRepository) Get(ctx context.Context) ([]entity.Questions, error) {
	ret := _m.Called(ctx)

	var r0 []entity.Questions
	if rf, ok := ret.Get(0).(func(context.Context) []entity.Questions); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]entity.Questions)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetOne provides a mock function with given fields: ctx, id
func (_m *QuestionsQueryRepository) GetOne(ctx context.Context, id string) (entity.Questions, error) {
	ret := _m.Called(ctx, id)

	var r0 entity.Questions
	if rf, ok := ret.Get(0).(func(context.Context, string) entity.Questions); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(entity.Questions)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}
