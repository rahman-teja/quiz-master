// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import context "context"
import memorydb "github.com/rahman-teja/quiz-master/pkg/memorydb"
import mock "github.com/stretchr/testify/mock"

// Collection is an autogenerated mock type for the Collection type
type Collection struct {
	mock.Mock
}

// Create provides a mock function with given fields: ctx, data
func (_m *Collection) Create(ctx context.Context, data interface{}) error {
	ret := _m.Called(ctx, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, interface{}) error); ok {
		r0 = rf(ctx, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Delete provides a mock function with given fields: ctx, id
func (_m *Collection) Delete(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// Find provides a mock function with given fields: ctx
func (_m *Collection) Find(ctx context.Context) (memorydb.Cursor, error) {
	ret := _m.Called(ctx)

	var r0 memorydb.Cursor
	if rf, ok := ret.Get(0).(func(context.Context) memorydb.Cursor); ok {
		r0 = rf(ctx)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(memorydb.Cursor)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// FindOne provides a mock function with given fields: ctx, id
func (_m *Collection) FindOne(ctx context.Context, id string) memorydb.SingleResult {
	ret := _m.Called(ctx, id)

	var r0 memorydb.SingleResult
	if rf, ok := ret.Get(0).(func(context.Context, string) memorydb.SingleResult); ok {
		r0 = rf(ctx, id)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(memorydb.SingleResult)
		}
	}

	return r0
}

// Update provides a mock function with given fields: ctx, id, data
func (_m *Collection) Update(ctx context.Context, id string, data interface{}) error {
	ret := _m.Called(ctx, id, data)

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, interface{}) error); ok {
		r0 = rf(ctx, id, data)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
